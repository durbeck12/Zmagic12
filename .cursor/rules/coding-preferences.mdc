---
description: 
globs: 
alwaysApply: true
---
 ### üõ† **Coding Pattern Preferences**  

#### Princ√≠pios Gerais

- **Simplicidade em primeiro lugar:** Priorize solu√ß√µes diretas e eficientes, evitando complexidade desnecess√°ria.
- **Evitar duplica√ß√£o de c√≥digo:** Verifique sempre a base de c√≥digo existente antes de criar novas funcionalidades ou m√©todos.
- **Arquitetura modular:** Siga a estrutura de componentes e gerenciadores estabelecida no projeto (StateManager, BlockManager, etc.).
- **Consist√™ncia visual:** Utilize as vari√°veis CSS e os padr√µes de estilo definidos em `main.css` e outros arquivos CSS.

#### Documenta√ß√£o

- **Arquivo de registro de fun√ß√µes:** Mantenha o arquivo `guia_de_desenvolvimento.md` atualizado com:
  - Todas as fun√ß√µes do projeto em ordem cronol√≥gica do workflow
  - Descri√ß√£o detalhada da funcionalidade de cada fun√ß√£o
  - Arquivo onde a fun√ß√£o est√° definida
  - Depend√™ncias da fun√ß√£o (indicando arquivos)
  - Fun√ß√µes que dependem desta fun√ß√£o (indicando arquivos)
- **Documenta√ß√£o de CSS:** Ao adicionar ou modificar estilos, atualize a documenta√ß√£o nos arquivos CSS correspondentes (ex: `css_overview.md`).
- **Coment√°rios claros:** Use coment√°rios para explicar l√≥gica complexa, especialmente em fluxos como valida√ß√£o de conex√µes ou gera√ß√£o de c√≥digo.

#### Estrutura do C√≥digo

- **Padr√£o de componentes:** Mantenha a estrutura de classes com construtores consistentes que recebem `container` e `stateManager`.
- **Eventos centralizados:** Use o sistema de eventos do `StateManager` para comunica√ß√£o entre componentes.
- **Nomes descritivos:** Nomeie fun√ß√µes, vari√°veis e classes de forma descritiva seguindo o padr√£o camelCase existente.
- **Tamanho dos arquivos:** Mantenha arquivos dentro de limites razo√°veis (~500 linhas). Se um arquivo ficar muito grande, considere divid√≠-lo em componentes menores.

#### Intera√ß√£o Visual

- **Codifica√ß√£o por cores:** Siga o sistema de codifica√ß√£o por cores para diferentes tipos de blocos:
  - Vari√°veis: Verde (#2ecc71)
  - Controle de fluxo: Vermelho (#e74c3c)
  - Opera√ß√µes matem√°ticas: Laranja (#f39c12)
  - Sa√≠da: Roxo (#9b59b6)
  - Manipula√ß√£o de dados: Azul (#3498db)
- **Feedback visual:** Forne√ßa feedback visual claro para a√ß√µes do usu√°rio (sele√ß√£o, hover, erro).
- **Consist√™ncia de formul√°rios:** Mantenha a apar√™ncia consistente para controles de entrada em pain√©is de propriedades.

#### Ambientes e Implanta√ß√£o

- **Considera√ß√£o para diferentes ambientes:** Garanta que o c√≥digo funcione corretamente em ambientes **dev, test e prod**.
- **Mudan√ßas controladas:** Fa√ßa apenas altera√ß√µes solicitadas ou que sejam claramente necess√°rias e bem compreendidas.
- **Corre√ß√£o de bugs:** Tente resolver problemas dentro do padr√£o atual antes de introduzir uma nova tecnologia ou padr√£o.
- **Evitar scripts tempor√°rios:** N√£o inclua scripts para uso √∫nico diretamente em arquivos de produ√ß√£o.

#### Refer√™ncia para IA

- **Coment√°rios para IA:** Adicione coment√°rios espec√≠ficos que ajudem a IA a compreender a estrutura do c√≥digo e seus padr√µes.
- **Mapeamento de arquivos:** Mantenha uma documenta√ß√£o clara da estrutura de arquivos e suas responsabilidades.
- **Exemplos de c√≥digo:** Forne√ßa exemplos concretos de padr√µes de c√≥digo para refer√™ncia da IA ao solicitar novos recursos.
- **Vocabul√°rio consistente:** Use termos consistentes ao se referir a componentes e funcionalidades (ex: sempre use "bloco" em vez de alternar entre "bloco" e "n√≥").