---
description: 
globs: 
alwaysApply: true
---
 ### üöÄ **Technical Stack Guidelines**  

#### Arquitetura Frontend

- **Base tecnol√≥gica:**
  - JavaScript puro (Vanilla JS) para componentes e l√≥gica principal
  - HTML DOM manipulado diretamente via JavaScript
  - CSS com arquitetura de arquivos modular
  - Evite depend√™ncias externas desnecess√°rias

- **Estrutura CSS:**
  - Vari√°veis CSS para temas consistentes
  - Arquivos CSS dedicados para cada componente principal
  - Nomenclatura baseada em componentes e funcionalidades
  - Sistema de cores codificado para tipos de blocos

- **Sistema de componentes:**
  - Gerenciadores para encapsular a l√≥gica de cada subsistema (BlockManager, ConnectionManager, etc.)
  - Classes com responsabilidades bem definidas
  - Sistema de eventos centralizado via StateManager
  - Padr√£o constructor(container, stateManager) para inicializa√ß√£o

#### Editor de C√≥digo

- **Editor B√°sico e Avan√ßado:**
  - Editor b√°sico usa textareas com estiliza√ß√£o personalizada
  - Editor avan√ßado inclui destaque de sintaxe
  - Implementa√ß√£o de analisador de c√≥digo para valida√ß√£o
  - Funcionalidade de intera√ß√£o bidirecional (editor<->blocos visuais)

- **Elementos Visuais:**
  - Canvas para renderiza√ß√£o de blocos e conex√µes
  - Elementos DOM para intera√ß√µes complexas
  - Sistema de drag-and-drop personalizado
  - Feedback visual por meio de cores e anima√ß√µes

#### Gerenciamento de Estado

- **Estado Centralizado:**
  - StateManager como fonte √∫nica de verdade
  - Sistema publish/subscribe para comunica√ß√£o entre componentes
  - Hist√≥rico de modifica√ß√µes para undo/redo
  - Valida√ß√£o centralizada de opera√ß√µes

- **Persist√™ncia de Dados:**
  - Serializa√ß√£o de estado para JSON
  - Carregamento e salvamento de projetos
  - Valida√ß√£o de integridade dos dados

#### Intera√ß√£o e Acessibilidade

- **Intera√ß√£o do Usu√°rio:**
  - Manipula√ß√£o direta para arrastar blocos
  - Pain√©is de propriedades para edi√ß√£o
  - Visualiza√ß√£o em √°rvore para navega√ß√£o hier√°rquica
  - Feedback visual claro para todas as intera√ß√µes

- **Padr√µes de Design:**
  - Tema escuro com contraste adequado
  - Cores distintas para diferentes tipos de blocos
  - Indicadores visuais para estados (sele√ß√£o, erro, etc.)
  - Transi√ß√µes e anima√ß√µes sutis para melhorar a experi√™ncia

#### Ambiente de Desenvolvimento

- **Estrutura do Projeto:**
  - Organiza√ß√£o em diret√≥rios por funcionalidade (blocks/, canvas/, etc.)
  - Documenta√ß√£o inline e externa (guia_de_desenvolvimento.md)
  - Conven√ß√µes de nomenclatura consistentes
  - Arquivos CSS correspondentes para cada componente principal

- **Ferramentas de Desenvolvimento:**
  - Console do navegador para depura√ß√£o
  - Inspetor de elementos para ajuste de estilos
  - Documenta√ß√£o extensiva para refer√™ncia
  - Cursor IDE com assist√™ncia de IA

#### Integra√ß√£o com IA

- **Assist√™ncia ao Desenvolvimento:**
  - Documenta√ß√£o otimizada para consultas de IA
  - Exemplos de c√≥digo para refer√™ncia
  - Coment√°rios explicativos para contexto
  - Arquivos de regras para padroniza√ß√£o

- **Padr√µes para IA:**
  - Estrutura de arquivos previs√≠vel
  - Vocabul√°rio consistente em todo o c√≥digo
  - Exemplos concretos de implementa√ß√µes
  - Guias de desenvolvimento detalhados

#### Ambientes Separados

- **Desenvolvimento:**
  - Modo de depura√ß√£o ativado
  - Logs detalhados
  - Carregamento de exemplos para teste

- **Teste:**
  - Valida√ß√£o de componentes e intera√ß√µes
  - Testes de fluxos completos
  - Verifica√ß√£o de casos extremos

- **Produ√ß√£o:**
  - Otimiza√ß√£o de desempenho
  - Remo√ß√£o de logs desnecess√°rios
  - Manejo de erros amig√°vel ao usu√°rio